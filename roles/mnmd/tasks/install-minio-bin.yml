---
- name: Check if MinIO Binary Already Exists
  stat: path={{ _minio.bin }}
  register: check_minio_bin
- debug: msg={{ check_minio_bin }}


- name: Copy MinIO Binary from Local Directory
  copy: src={{ minio_bin }}.zip dest=/tmp/{{ minio_bin }}.zip mode=0644 owner=root group=root
  register: minio_local_copy
  when: check_minio_bin.stat.exists == false and _minio.download == false


- name: Unarchive MinIO
  unarchive:
    src: "/tmp/{{ minio_bin }}.zip"
    dest: "/usr/local/bin"
    owner: "root"
    group: "root"
    mode: "0755"
    remote_src: yes
  register: minio_unarchive
  when: check_minio_bin.stat.exists == false and _minio.download == false


- name: Download MinIO Server
  get_url:
    url: "{{ _minio.download_url }}/{{ minio_bin }}"
    dest: "{{ _minio.bin_dir }}"
    mode: 0755
    checksum: "{{ _minio.server_checksum | d(omit) }}"
  when: ( _minio.server_url.endswith('minio') or ( _minio.download_url + '/' + minio_bin ).endswith('Z') ) and ( check_minio_bin.stat.exists == false and _minio.download == true )


- name: Unarchive MinIO Server
  unarchive:
    src: "{{ _minio.server_url }}"
    dest: "{{ _minio.bin | dirname }}"
    remote_src: "{{ _minio.server_url.startswith('http') }}"
    validate_certs: no
    mode: 0755
  when: _minio.server_url.endswith('xz') and ( check_minio_bin.stat.exists == false and _minio.download == true )


- name: Create Symbolic link
  file:
    src: "/usr/local/bin/{{ minio_bin }}"
    dest: "/usr/local/bin/minio"
    state: link
  when: minio_bin.endswith('Z') and check_minio_bin.stat.exists == false

